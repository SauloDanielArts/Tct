/*
 * TaView.java
 */
package ta;

import org.jfree.data.category.CategoryDataset;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.general.DatasetUtilities;

/**
 * The application's main frame.
 */
public class TaView extends FrameView {

    public TaView(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {

            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String) (evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer) (evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = TaApp.getApplication().getMainFrame();
            aboutBox = new TaAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        TaApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Texto1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        Texto2 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        Tabela1 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        Tabela2 = new javax.swing.JTable();
        Comparar = new javax.swing.JButton();
        Import2 = new javax.swing.JButton();
        Import1 = new javax.swing.JButton();
        Limpar = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        Tabela3 = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        Tabela4 = new javax.swing.JTable();
        BGraficos = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        Tabela5 = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        Tabela6 = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setLayout(new java.awt.GridLayout(1, 0));

        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        Texto1.setColumns(20);
        Texto1.setRows(5);
        Texto1.setName("Texto1"); // NOI18N
        jScrollPane1.setViewportView(Texto1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 250, 190));

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        Texto2.setColumns(20);
        Texto2.setRows(5);
        Texto2.setName("Texto2"); // NOI18N
        jScrollPane2.setViewportView(Texto2);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 250, 190));

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        Tabela1.setAutoCreateRowSorter(true);
        Tabela1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Palavras Encontradas", "fi", "Fi", "fri", "Fri", "%", "Angulo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tabela1.setName("Tabela1"); // NOI18N
        jScrollPane3.setViewportView(Tabela1);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 20, 480, 170));

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        Tabela2.setAutoCreateRowSorter(true);
        Tabela2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Palavras Encontradas", "fi", "Fi", "fri", "Fri", "%", "Angulo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tabela2.setName("Tabela2"); // NOI18N
        jScrollPane4.setViewportView(Tabela2);

        jPanel1.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 260, 480, 170));

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(ta.TaApp.class).getContext().getResourceMap(TaView.class);
        Comparar.setBackground(resourceMap.getColor("Comparar.background")); // NOI18N
        Comparar.setText(resourceMap.getString("Comparar.text")); // NOI18N
        Comparar.setName("Comparar"); // NOI18N
        Comparar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CompararMouseClicked(evt);
            }
        });
        jPanel1.add(Comparar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 500, 250, 50));

        Import2.setText(resourceMap.getString("Import2.text")); // NOI18N
        Import2.setName("Import2"); // NOI18N
        Import2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Import2MouseClicked(evt);
            }
        });
        jPanel1.add(Import2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 460, 250, -1));

        Import1.setText(resourceMap.getString("Import1.text")); // NOI18N
        Import1.setName("Import1"); // NOI18N
        Import1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Import1MouseClicked(evt);
            }
        });
        jPanel1.add(Import1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 250, -1));

        Limpar.setBackground(resourceMap.getColor("Limpar.background")); // NOI18N
        Limpar.setText(resourceMap.getString("Limpar.text")); // NOI18N
        Limpar.setName("Limpar"); // NOI18N
        Limpar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LimparMouseClicked(evt);
            }
        });
        jPanel1.add(Limpar, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 500, 160, 50));

        jScrollPane5.setName("jScrollPane5"); // NOI18N

        Tabela3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N° de Palavras no Texto ", "N° de Palavras Diferentes no Texto ", "Similaridade com o Texto2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tabela3.setName("Tabela3"); // NOI18N
        jScrollPane5.setViewportView(Tabela3);

        jPanel1.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 200, 480, 50));

        jScrollPane6.setName("jScrollPane6"); // NOI18N

        Tabela4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N° de Palavras no Texto ", "N° de Palavras Diferentes no Texto ", "Similaridade com o Texto1"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tabela4.setName("Tabela4"); // NOI18N
        jScrollPane6.setViewportView(Tabela4);

        jPanel1.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 440, 480, 50));

        BGraficos.setBackground(resourceMap.getColor("BGraficos.background")); // NOI18N
        BGraficos.setText(resourceMap.getString("BGraficos.text")); // NOI18N
        BGraficos.setName("BGraficos"); // NOI18N
        BGraficos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BGraficosMouseClicked(evt);
            }
        });
        jPanel1.add(BGraficos, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 500, 300, 50));

        jScrollPane7.setName("jScrollPane7"); // NOI18N

        Tabela5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Total de Classes", "Frequencia T1", "Frequencia T1"
            }
        ));
        Tabela5.setName("Tabela5"); // NOI18N
        jScrollPane7.setViewportView(Tabela5);
        Tabela5.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("Tabela5.columnModel.title0")); // NOI18N
        Tabela5.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("Tabela5.columnModel.title1")); // NOI18N
        Tabela5.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("Tabela5.columnModel.title2")); // NOI18N

        jPanel1.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 20, 260, 470));

        jScrollPane8.setName("jScrollPane8"); // NOI18N

        Tabela6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N° de Palavras nos Textos", "N° de Palavras Diferentes nos Textos"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tabela6.setName("Tabela6"); // NOI18N
        jScrollPane8.setViewportView(Tabela6);

        jPanel1.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 500, 260, 50));

        mainPanel.add(jPanel1);

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(ta.TaApp.class).getContext().getActionMap(TaView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N
        statusPanel.setLayout(new java.awt.CardLayout());

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N
        statusPanel.add(statusPanelSeparator, "card2");

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N
        statusPanel.add(statusMessageLabel, "card3");

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N
        statusPanel.add(statusAnimationLabel, "card4");

        progressBar.setName("progressBar"); // NOI18N
        statusPanel.add(progressBar, "card5");

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void CompararMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CompararMouseClicked
        // TODO add your handling code here:

        //legendas das tabelas
        DefaultTableModel Modelo1 = new DefaultTableModel(null, t1.Colunas);
        DefaultTableModel Modelo2 = new DefaultTableModel(null, t2.Colunas);
        DefaultTableModel mod1 = new DefaultTableModel(null, col1);
        DefaultTableModel mod2 = new DefaultTableModel(null, col2);
        DefaultTableModel Modelo = new DefaultTableModel(null, col3);
        DefaultTableModel Modelo3 = new DefaultTableModel(null, col4);
        Tabela5.setModel(Modelo);
        Tabela1.setModel(Modelo1);
        Tabela2.setModel(Modelo2);
        Tabela3.setModel(mod1);
        Tabela4.setModel(mod2);
        Tabela6.setModel(Modelo3);
        calculo = true;//calculo esta ativado


        //texto 1
        t1.Colunas(C);
        t1.Ttexto(Texto1, Tabela1);

        //texto 2
        t2.Colunas(C);
        t2.Ttexto(Texto2, Tabela2);


        if (t1.Ptexto(Texto1.getText().trim()).isEmpty() == false) {//se testo1 nao esta vasio
            //-----comparar textos aqui
            Similaridade1 = t1.PerSTexto(t2);

            if (t2.Ptexto(Texto2.getText().trim()).isEmpty()) {
                Tabela2.setModel(Modelo2);
            }

            lin1[0][0] = "" + t1.NPalavrasTotal;
            lin1[0][1] = "" + t1.NPalavrasDif;

            if (Texto2.getText().isEmpty())//se texto 2 esta vasio
            {
                lin1[0][2] = "   ----------------------------------   ";
            } else {
                lin1[0][2] = "" + Similaridade1 + "%";
            }

            mod1 = new DefaultTableModel(lin1, col1);
            Tabela3.setModel(mod1);
        }

        if (t2.Ptexto(Texto2.getText().trim()).isEmpty() == false) {//se testo2 nao esta vasio
            //-----comparar textos aqui
            Similaridade2 = t2.PerSTexto(t1);

            if (t1.Ptexto(Texto1.getText().trim()).isEmpty()) {
                Tabela1.setModel(Modelo1);
            }

            lin2[0][0] = "" + t2.NPalavrasTotal;
            lin2[0][1] = "" + t2.NPalavrasDif;

            if (Texto1.getText().isEmpty())//se texto 2 esta vasio
            {
                lin2[0][2] = "   ----------------------------------   ";
            } else {
                lin2[0][2] = "" + Similaridade2 + "%";
            }

            mod2 = new DefaultTableModel(lin2, col2);
            Tabela4.setModel(mod2);
        }

        if (calculo == true && Texto1.getText().trim().isEmpty() == false && Texto2.getText().trim().isEmpty() == false) {
            FrequenciaP(t1, t2);//-----------------------
        }
    }//GEN-LAST:event_CompararMouseClicked

    private void LimparMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LimparMouseClicked
        Texto1.setText("");
        Texto2.setText("");
        t1.Colunas(C);
        DefaultTableModel modelo = new DefaultTableModel(null, t1.Colunas);
        DefaultTableModel mod1 = new DefaultTableModel(null, col1);
        DefaultTableModel mod2 = new DefaultTableModel(null, col2);
        Tabela3.setModel(mod1);
        Tabela4.setModel(mod2);
        Tabela1.setModel(modelo);
        Tabela2.setModel(modelo);
        Texto1.requestFocus();
        calculo = false;
        DefaultTableModel Md1 = new DefaultTableModel(null, col3);
        Tabela5.setModel(Md1);
        DefaultTableModel Md2 = new DefaultTableModel(null, col4);
        Tabela6.setModel(Md2);


        /*CombinedCategoryPlotDemo1 demo = new CombinedCategoryPlotDemo1("Combined Category Plot Demo 1");
        demo.pack();
        RefineryUtilities.centerFrameOnScreen(demo);
        demo.setVisible(true);*/
    }//GEN-LAST:event_LimparMouseClicked

    private void Import1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Import1MouseClicked
        t1.LoadTexto(Texto1);
        DefaultTableModel modelo = new DefaultTableModel(null, t1.Colunas);
        DefaultTableModel mod1 = new DefaultTableModel(null, col1);
        DefaultTableModel Modelo3 = new DefaultTableModel(null, col4);
        Tabela4.setModel(Modelo3);
        Tabela1.setModel(modelo);
        Tabela3.setModel(mod1);
    }//GEN-LAST:event_Import1MouseClicked

    private void Import2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Import2MouseClicked
        t2.LoadTexto(Texto2);
        DefaultTableModel modelo = new DefaultTableModel(null, t2.Colunas);
        DefaultTableModel mod2 = new DefaultTableModel(null, col2);
        DefaultTableModel Modelo3 = new DefaultTableModel(null, col4);
        Tabela4.setModel(Modelo3);
        Tabela2.setModel(modelo);
        Tabela4.setModel(mod2);
    }//GEN-LAST:event_Import2MouseClicked

    private void BGraficosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BGraficosMouseClicked

        //histograma
        if (Texto1.getText().trim().isEmpty() == false && calculo == true && Texto2.getText().trim().isEmpty() == true) {
            double[][] d = new double[1][t1.NPalavrasDif];

            for (int i = 0; i < t1.NPalavrasDif; i++) {
                d[0][i] = t1.EX[i][0];
            }

            BarChart("Histograma", "Frequencia das Palavras no Textos 1", "Classes", "Frequencia", null, "c", d);

        }

        if (Texto1.getText().trim().isEmpty() == true && calculo == true && Texto2.getText().trim().isEmpty() == false) {
            double[][] d = new double[1][t2.NPalavrasDif];

            for (int i = 0; i < t2.NPalavrasDif; i++) {
                d[0][i] = t2.EX[i][0];
            }

            BarChart("Histograma", "Frequencia das Palavras no Textos 2", "Classes", "Frequencia", null, "c", d);
        }

        if (Texto1.getText().trim().isEmpty() == false && calculo == true && Texto2.getText().trim().isEmpty() == false) {
            BarChart("Histograma", "Frequencia das Palavras nos Textos 1 e 2", "Classes", "Frequencia", "Texto", "c", Dados);//
        }


        //Graficos de pizza
        if (t1.NPalavrasDif < 50 && t2.NPalavrasDif < 50) {
            if (t2.Ptexto(Texto2.getText().trim()).isEmpty() == false) {
                if (t2.NPalavrasDif <= 50 && calculo == true) {
                    t2.GraficoP("Grafico de Pizza Referente as 'Classes' do Texto2", "Grafico 2");
                } else if (t2.NPalavrasDif <= 50 && t2.NPalavrasDif > 0 && Texto2.getText().trim().isEmpty() == true) {
                    JOptionPane.showMessageDialog(null, "Grafico de Pizza Referente as 'Classes' do Texto2 \n Não sera exibido. .:N° de Classes > 50");
                }
            }

            if (t1.Ptexto(Texto1.getText().trim()).isEmpty() == false) {
                if (t1.NPalavrasDif <= 50 && t2.NPalavrasDif < 50 && calculo == true) {
                    t1.GraficoP("Grafico de Pizza Referente as 'Classes' do Texto1", "Grafico 1");
                } else if (t1.NPalavrasDif <= 50 && t1.NPalavrasDif > 0 && Texto1.getText().trim().isEmpty() == true) {
                    JOptionPane.showMessageDialog(null, "Grafico de Pizza Referente as 'Classes' do Texto1. \n Não sera exibido. .:N° de Classes > 50");
                }
            }
        } else if (t1.Ptexto(Texto1.getText().trim()).isEmpty() == false && t2.Ptexto(Texto2.getText().trim()).isEmpty() == false) {
            JOptionPane.showMessageDialog(null, "Os Graficos de Pizza Referente as 'Classes' dos Texto1 e Texto2. \n Não serão exibidos. .:N° de Classes > 50");
        }
    }//GEN-LAST:event_BGraficosMouseClicked
    public String[] col1 = new String[]{"N° de Palavras no Texto", "N° de Palavras Diferentes no Texto", "Similaridade com o Texto2"};
    public String[] col2 = new String[]{"N° de Palavras no Texto", "N° de Palavras Diferentes no Texto", "Similaridade com o Texto1"};
    public String[][] lin1 = new String[1][3];
    public String[][] lin2 = new String[1][3];
    DefaultTableModel mod1 = new DefaultTableModel(null, col1);
    DefaultTableModel mod2 = new DefaultTableModel(null, col2);
    public float Similaridade1, Similaridade2;
    public String[] col3 = new String[]{"Total de Classes ", "Frequencia T1", "Frequencia T2"};
    TDados t1 = new TDados();
    TDados t2 = new TDados();
    //legendas das tabelas 1 e 2
    String[] C = new String[]{"Palavras Encontradas", "fi", "Fi", "fri", "Fri", "%", "Angulo"};
    boolean calculo = false;//indica se os calculos foram feito ou nao
    double[][] Dados;//dados das frequencias das palavras dos textos
    public String[] col4 = new String[]{"N° de Palavras nos Textos", "N° de Palavras Diferentes nos Textos"};
//------------------------------------------------------------------------------------------------------------

    //graficao de barras dos textos
    public void BarChart(String Cab, String Titulo, String LOrisontal, String LVertical, String Legend, String Classe, double[][] dados) {

        double[][] data = dados;//dados de todas as palavras

        boolean l = true;//ativacao das legendas
        if (Legend == null) {
            l = false;
            Legend = "";
        }

        CategoryDataset dataset = DatasetUtilities.createCategoryDataset(Legend, Classe, data);//modelo do grafico

        //propriedades do grafico
        JFreeChart chart = ChartFactory.createBarChart3D(
                Titulo, LOrisontal, LVertical, dataset,
                PlotOrientation.VERTICAL, l, true, false);

        /*JFreeChart chart = ChartFactory.createBarChart(//ex de obijeto JFreeChart
        "Frequencia das Palavras nos Textos 1 e 2", "Classes", "Frequencia", dataset,
        PlotOrientation.VERTICAL, true, true, false);*/


        ChartFrame chartPanel = new ChartFrame(Cab, chart);//cria o painel de esibicao
        chartPanel.setPreferredSize(new java.awt.Dimension(800, 570));//altera o tamanho do painel de esibicao
        chartPanel.pack();//imprime o grafico
        chartPanel.setVisible(true);//deixa o grafico sempre visivel
    }

    public void FrequenciaP(TDados T1, TDados T2)//calcula a frequencia de todas as palavras encontradas
    {
        String Texto = "";//todas as palavras do texto 1 e 2

        for (int i = 0; i < T1.NPalavrasDif; i++) {
            Texto = Texto + " " + T1.classes[i];
        }

        for (int i = 0; i < T2.NPalavrasDif; i++) {
            Texto = Texto + " " + T2.classes[i];
        }

        //System.out.println(Texto);

        TDados T = new TDados();//objeto que guarda os dados sobre os dois textos

        String[] Clas = T.Ctexto(Texto);//classes de do objeto T

        // for(int i=0;i<T.NPalavrasDif;i++)
        //  System.out.println(""+Clas[i]+"\n");

        Dados = new double[2][T.NPalavrasDif];//dados das frequencias das palavras dos textos

        for (int i = 0; i < T.NPalavrasDif; i++) {
            for (int j = 0; j < T1.NPalavrasDif; j++) {
                if (T1.classes[j].equals(Clas[i]) == true) {
                    Dados[0][i] = T1.EX[j][0];
                }
            }
        }

        for (int i = 0; i < T.NPalavrasDif; i++) {
            for (int j = 0; j < T2.NPalavrasDif; j++) {
                if (T2.classes[j].equals(Clas[i]) == true) {
                    Dados[1][i] = +T2.EX[j][0];
                }
            }
        }

        //for(int i=0;i<T.NPalavrasDif;i++)
        //System.out.println(""+Dados[0][i]+"_"+Dados[1][i]+"\n");

        String[][] DT = new String[T.NPalavrasDif][3];//dados das frequencias das palavras dos textos como _Strings

        for (int i = 0; i < T.NPalavrasDif; i++) {
            DT[i][0] = Clas[i];
        }

        for (int i = 0; i < T.NPalavrasDif; i++) {
            DT[i][1] = String.valueOf((int) Dados[0][i]);
        }

        for (int i = 0; i < T.NPalavrasDif; i++) {
            DT[i][2] = String.valueOf((int) Dados[1][i]);
        }


        DefaultTableModel Mod1 = new DefaultTableModel(DT, col3);//modelo da tabela 5
        Tabela5.setModel(Mod1);

        String[][] DF = new String[1][2];//dados da tabela T6
        DF[0][0] = String.valueOf(T.NPalavrasTotal);
        DF[0][1] = String.valueOf(T.NPalavrasDif);

        DefaultTableModel Mod2 = new DefaultTableModel(DF, col4);//modelo da tabela 6
        Tabela6.setModel(Mod2);
    }
//------------------------------------------------------------------------------------------------------------
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BGraficos;
    private javax.swing.JButton Comparar;
    private javax.swing.JButton Import1;
    private javax.swing.JButton Import2;
    private javax.swing.JButton Limpar;
    private javax.swing.JTable Tabela1;
    private javax.swing.JTable Tabela2;
    private javax.swing.JTable Tabela3;
    private javax.swing.JTable Tabela4;
    private javax.swing.JTable Tabela5;
    private javax.swing.JTable Tabela6;
    private javax.swing.JTextArea Texto1;
    private javax.swing.JTextArea Texto2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables
    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
    private JDialog aboutBox;
}
